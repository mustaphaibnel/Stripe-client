=== ./server.js ===
const express = require('express');
const bodyParser = require('body-parser');
const cors = require('cors');
const { v4: uuidv4 } = require('uuid');
const stripe = require('stripe')('sk_test_51PQDAFRv7G5ppYXUiqX1C1LvV2220rH14ZCGChLGN6MpCAH0iw2lYAkyjcPuFwbKtBvfrdZFoKz8vqNwtLrfNEF200Lli99trT'); // Replace with your Stripe secret key

const app = express();
app.use(cors());
app.use(bodyParser.json());

let plans = {}; // In-memory store for subscription plans

// Create a new subscription plan
app.post('/create-plan', async (req, res) => {
    const { productName, price, interval, creatorId } = req.body;

    try {
        const product = await stripe.products.create({
            name: productName,
        });

        const priceObj = await stripe.prices.create({
            unit_amount: price,
            currency: 'usd',
            recurring: { interval },
            product: product.id,
        });

        const planId = uuidv4();
        plans[planId] = {
            creatorId,
            productId: product.id,
            priceId: priceObj.id,
            productName,
            price,
            interval,
        };

        res.json({ planId });
    } catch (error) {
        console.error('Error creating plan:', error);
        res.status(500).json({ error: error.message });
    }
});

// List all subscription plans
app.get('/plans', (req, res) => {
    res.json({ plans });
});

// Create a customer
app.post('/create-customer', async (req, res) => {
    const { email, paymentMethodId } = req.body;

    try {
        const customer = await stripe.customers.create({
            email: email,
            payment_method: paymentMethodId,
            invoice_settings: {
                default_payment_method: paymentMethodId,
            },
        });

        res.json({ customerId: customer.id });
    } catch (error) {
        console.error('Error creating customer:', error);
        res.status(500).json({ error: error.message });
    }
});

// Create a Checkout Session
app.post('/create-checkout-session', async (req, res) => {
    const { planId, email } = req.body;

    if (!plans[planId]) {
        return res.status(404).json({ error: 'Plan not found' });
    }

    try {
        const customer = await stripe.customers.create({ email });
        const session = await stripe.checkout.sessions.create({
            payment_method_types: ['card'],
            customer: customer.id,
            line_items: [
                {
                    price: plans[planId].priceId,
                    quantity: 1,
                },
            ],
            mode: 'subscription',
            success_url: 'http://localhost:8000/success.html', // Replace with your success URL
            cancel_url: 'http://localhost:8000/cancel.html', // Replace with your cancel URL
        });

        res.json({ id: session.id });
    } catch (error) {
        console.error('Error creating checkout session:', error);
        res.status(500).json({ error: error.message });
    }
});

// List all customers
app.get('/customers', async (req, res) => {
    try {
        const customers = await stripe.customers.list({
            limit: 10,
        });

        res.json({ customers });
    } catch (error) {
        console.error('Error fetching customers:', error);
        res.status(500).json({ error: error.message });
    }
});

app.listen(3000, () => console.log('Server running on port 3000'));

=========================================

=== ./index.html ===
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Stripe Subscription</title>
    <script src="https://js.stripe.com/v3/"></script>
    <style>
        .form-group {
            margin-bottom: 1em;
        }
        .form-group label {
            display: block;
            margin-bottom: 0.5em;
        }
        pre {
            background: #f4f4f4;
            padding: 10px;
            border-radius: 5px;
        }
    </style>
</head>
<body>
    <h1>Create Subscription Plan</h1>
    <form id="create-plan-form">
        <div class="form-group">
            <label for="product-name">Product Name:</label>
            <input type="text" id="product-name" required>
        </div>
        <div class="form-group">
            <label for="price">Price (in cents):</label>
            <input type="number" id="price" required>
        </div>
        <div class="form-group">
            <label for="interval">Interval (e.g., month):</label>
            <input type="text" id="interval" required>
        </div>
        <div class="form-group">
            <label for="creator-id">Creator ID:</label>
            <input type="text" id="creator-id" required>
        </div>
        <button type="submit">Create Plan</button>
    </form>

    <h1>Available Plans</h1>
    <pre id="plans-list"></pre>

    <h1>Available Customers</h1>
    <pre id="customers-list"></pre>

    <h1>Subscribe to a Plan</h1>
    <form id="subscribe-form">
        <div class="form-group">
            <label for="email">Email:</label>
            <input type="email" id="email" required>
        </div>
        <div class="form-group">
            <label for="plan-id">Plan ID:</label>
            <input type="text" id="plan-id" required>
        </div>
        <button type="submit">Subscribe</button>
    </form>

    <script>
        const stripe = Stripe('pk_test_51PQDAFRv7G5ppYXUx4IQ2zbbFXCMujC0n3YzU7Kn4OrpxbKdXlLnVNm5ISjpRxefdef7h3RXM5kEk48LCVVuwJCF00n1LBnaEN'); // Replace with your Stripe public key

        const createPlanForm = document.getElementById('create-plan-form');
        const plansList = document.getElementById('plans-list');
        const customersList = document.getElementById('customers-list');

        createPlanForm.addEventListener('submit', async (event) => {
            event.preventDefault();

            const productName = document.getElementById('product-name').value;
            const price = document.getElementById('price').value;
            const interval = document.getElementById('interval').value;
            const creatorId = document.getElementById('creator-id').value;

            try {
                const response = await fetch('http://localhost:3000/create-plan', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({ productName, price, interval, creatorId }),
                });

                if (!response.ok) {
                    throw new Error('Network response was not ok ' + response.statusText);
                }

                const data = await response.json();
                console.log('Plan created:', data.planId);
                await fetchPlans();
            } catch (error) {
                console.error('Error:', error);
            }
        });

        const subscribeForm = document.getElementById('subscribe-form');

        subscribeForm.addEventListener('submit', async (event) => {
            event.preventDefault();

            const email = document.getElementById('email').value;
            const planId = document.getElementById('plan-id').value;

            try {
                const response = await fetch('http://localhost:3000/create-checkout-session', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({ email, planId }),
                });

                if (!response.ok) {
                    throw new Error('Network response was not ok ' + response.statusText);
                }

                const session = await response.json();

                // Redirect to Stripe Checkout
                const result = await stripe.redirectToCheckout({
                    sessionId: session.id,
                });

                if (result.error) {
                    console.error(result.error.message);
                }
            } catch (error) {
                console.error('Error:', error);
            }
        });

        async function fetchPlans() {
            const response = await fetch('http://localhost:3000/plans');
            const data = await response.json();
            plansList.textContent = JSON.stringify(data.plans, null, 2);
        }

        async function fetchCustomers() {
            const response = await fetch('http://localhost:3000/customers');
            const data = await response.json();
            customersList.textContent = JSON.stringify(data.customers, null, 2);
        }

        async function initialize() {
            await fetchPlans();
            await fetchCustomers();
        }

        initialize();
    </script>
</body>
</html>

=========================================

=== ./cancel.html ===
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Cancel</title>
</head>
<body>
    <h1>Payment Cancelled</h1>
    <p>Your subscription process was cancelled. Please try again.</p>
</body>
</html>

=========================================

=== ./app.js ===
const stripe = Stripe('pk_test_51PQDAFRv7G5ppYXUx4IQ2zbbFXCMujC0n3YzU7Kn4OrpxbKdXlLnVNm5ISjpRxefdef7h3RXM5kEk48LCVVuwJCF00n1LBnaEN'); // Replace with your Stripe public key

const form = document.getElementById('subscription-form');
form.addEventListener('submit', async (event) => {
    event.preventDefault();

    const userId = document.getElementById('user-id').value;
    const resourceId = document.getElementById('resource-id').value;
    const userType = document.getElementById('user-type').value;

    try {
        const response = await fetch('http://localhost:3000/create-checkout-session', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                userId,
                resourceId,
                userType,
            }),
        });

        if (!response.ok) {
            throw new Error('Network response was not ok ' + response.statusText);
        }

        const session = await response.json();

        if (!session.id) {
            throw new Error('No session ID returned from backend');
        }

        // Redirect to Stripe Checkout
        const result = await stripe.redirectToCheckout({
            sessionId: session.id,
        });

        if (result.error) {
            console.error(result.error.message);
        }
    } catch (error) {
        console.error('Error:', error);
    }
});

=========================================

=== ./success.html ===
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Success</title>
</head>
<body>
    <h1>Payment Successful!</h1>
    <p>Thank you for your subscription.</p>
</body>
</html>

=========================================

